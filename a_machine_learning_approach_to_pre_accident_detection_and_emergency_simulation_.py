# -*- coding: utf-8 -*-
"""A Machine Learning Approach to Pre-Accident Detection and Emergency Simulation".ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCiQZn3FtfmQ2XMp2ezG9erq5gW5WIOI
"""

!pip install termcolor

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import termcolor


data = pd.read_csv("/content/archive (2).zip")
data = data.fillna("Unknown")

feature_encoders = {}
for col in data.columns:
    if col != "Accident_severity":
        le = LabelEncoder()
        data[col] = le.fit_transform(data[col].astype(str))
        feature_encoders[col] = le

target_encoder = LabelEncoder()
data["Accident_severity"] = target_encoder.fit_transform(data["Accident_severity"].astype(str))

X = data.drop("Accident_severity", axis=1)
y = data["Accident_severity"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)
print("Model Accuracy:", accuracy_score(y_test, model.predict(X_test)))


sample = X_test.iloc[[0]]
pred = model.predict(sample)
predicted_label = target_encoder.inverse_transform(pred)[0]
actual_label = target_encoder.inverse_transform([y_test.iloc[0]])[0]


def colorize(label):
    if label == "Slight Injury":
        return termcolor.colored(label, "green")
    elif label == "Serious Injury":
        return termcolor.colored(label, "yellow")
    elif label == "Fatal Injury":
        return termcolor.colored(label, "red")
    else:
        return label

print("\nSample Prediction:")
print("Predicted Severity:", colorize(predicted_label))
print("Actual Severity:", colorize(actual_label))

if predicted_label in ["Serious Injury", "Fatal Injury"]:
    print("\n Emergency Trigger Activated")
    driver_info = {
        "Age": sample["Age_band_of_driver"].values[0],
        "Sex": sample["Sex_of_driver"].values[0],
        "Vehicle": sample["Type_of_vehicle"].values[0],
        "Severity": predicted_label,
        "Location": "Simulated GPS: 11.0168¬∞ N, 76.9558¬∞ E"
    }

    print("Dispatching Emergency Alert...")
    for key, value in driver_info.items():
        print(f"{key}: {value}")
else:
    print("\n No emergency triggered.")

for i in range(10):
    sample = X_test.iloc[[i]]
    pred = model.predict(sample)
    predicted_label = target_encoder.inverse_transform(pred)[0]
    actual_label = target_encoder.inverse_transform([y_test.iloc[i]])[0]

    print(f"\n Sample {i+1}")
    print("Predicted Severity:", termcolor.colored(predicted_label, "green" if predicted_label == "Slight Injury" else "yellow" if predicted_label == "Serious Injury" else "red"))
    print("Actual Severity:", termcolor.colored(actual_label, "green" if actual_label == "Slight Injury" else "yellow" if actual_label == "Serious Injury" else "red"))

    if predicted_label in ["Serious Injury", "Fatal Injury"]:
        print(" Emergency Trigger Activated")
        driver_info = {
            "Age": sample["Age_band_of_driver"].values[0],
            "Sex": sample["Sex_of_driver"].values[0],
            "Vehicle": sample["Type_of_vehicle"].values[0],
            "Severity": predicted_label,
            "Location": f"Simulated GPS: 11.{i}168¬∞ N, 76.{i}558¬∞ E"
        }
        for key, value in driver_info.items():
            print(f"{key}: {value}")
    else:
        print(" No emergency triggered.")

# Analyze top causes of accidents
import matplotlib.pyplot as plt
import seaborn as sns

# Decode columns for readability
decoded_data = data.copy()
for col, encoder in feature_encoders.items():
    decoded_data[col] = encoder.inverse_transform(data[col])

# Plot top contributing factors
plt.figure(figsize=(10,6))
sns.countplot(y="Cause_of_accident", data=decoded_data, order=decoded_data["Cause_of_accident"].value_counts().index[:10], palette="coolwarm")
plt.title("Top 10 Causes of Accidents")
plt.xlabel("Count")
plt.ylabel("Cause of Accident")
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

new_driver = {
    "Age_band_of_driver": "18-30",
    "Sex_of_driver": "Male",
    "Type_of_vehicle": "Car",
    "Cause_of_accident": "Overspeed",
    "Day_of_week": "Friday",
    "Time": "Morning"
}


encoded_input = {}
for col in X.columns:
    val = new_driver.get(col, None)
    known_classes = feature_encoders[col].classes_

    if val not in known_classes:
        val = known_classes[0]

    encoded_input[col] = feature_encoders[col].transform([val])[0]


import numpy as np
input_df = pd.DataFrame([encoded_input])
pred = model.predict(input_df)
predicted_label = target_encoder.inverse_transform(pred)[0]

# ‚úÖ Display result with color
print("üöó Predicted Accident Severity:", termcolor.colored(
    predicted_label,
    "green" if predicted_label == "Slight Injury" else
    "yellow" if predicted_label == "Serious Injury" else
    "red"
))

# üöó Emotion-Aware Steering Wheel Simulation

# Simulated biometric readings
biometric_data = {
    "heart_rate_variability": 45,  # low HRV = high stress
    "grip_pressure": "High",
    "skin_conductivity": "Elevated"
}

# Risk scoring based on emotional stress
def assess_emotional_risk(data):
    risk = 0
    if data["heart_rate_variability"] < 50:
        risk += 2
    if data["grip_pressure"] == "High":
        risk += 2
    if data["skin_conductivity"] == "Elevated":
        risk += 2
    return risk

emotional_risk = assess_emotional_risk(biometric_data)

# Trigger system response
if emotional_risk >= 5:
    print("üîä Emotion Alert: Driver stress detected!")
    print("üé∂ Activating calming music...")
    print("üö® Sending pre-alert to emergency services...")
else:
    print("‚úÖ Driver emotional state stable.")

# üö® Emergency Dispatch Simulation After Emotional Alert

if emotional_risk >= 5:
    # Simulated driver profile
    driver_profile = {
        "Driver_ID": "DR-1023",
        "Age_band_of_driver": "18-30",
        "Sex_of_driver": "Male",
        "Vehicle_type": "Car",
        "Location": "Simulated GPS: 11.0168¬∞ N, 76.9558¬∞ E",
        "Stress_Level": "High",
        "Predicted_Severity": predicted_label
    }

    # Simulated dispatch system
    print("\nüì° Dispatching Emergency Alert to Services...")
    print("üöë Nearest Ambulance Notified")
    print("üöì Traffic Control Updated")
    print("üõ∞Ô∏è Location Broadcasted to Emergency Grid\n")

    for key, value in driver_profile.items():
        print(f"{key}: {value}")

    # Optional: simulate voice assistant
    print("\nüîä Voice Assistant: 'Emergency services have been notified. Stay calm and remain seated.'")
else:
    print("\n‚úÖ No emergency dispatch required.")

# üìä Final Output: Severity Prediction Distribution with Color-Coded Bars

import matplotlib.pyplot as plt
import seaborn as sns

# Predict on test set
y_pred = model.predict(X_test)
y_pred_labels = target_encoder.inverse_transform(y_pred)

# Normalize labels to match palette keys
normalized_labels = [label.title().replace("Injury", "Injury") for label in y_pred_labels]

# Create a DataFrame for visualization
severity_df = pd.DataFrame({'Predicted_Severity': normalized_labels})

# Define custom color palette
severity_colors = {
    'Slight Injury': 'green',
    'Serious Injury': 'yellow',
    'Fatal Injury': 'red'
}

# Plot the distribution
plt.figure(figsize=(8, 5))
sns.countplot(data=severity_df, x='Predicted_Severity', palette=severity_colors)
plt.title('üö¶ Predicted Accident Severity Distribution')
plt.xlabel('Severity Level')
plt.ylabel('Number of Cases')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()